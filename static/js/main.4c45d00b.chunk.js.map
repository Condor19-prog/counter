{"version":3,"sources":["components/inputNumber/Counter.module.css","components/universalButton/UniversalButton.module.css","components/universalButton/UniversalButton.tsx","redux/reducer.tsx","components/inputNumber/Counter.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["module","exports","UniversalButton","props","className","s","group","set","Button","variant","onClick","disabled","disableSet","twoButtons","increment","disableButton","style","marginRight","reset","minValue","initialState","counterValue","resetValue","Counter","counter","useSelector","state","count","dispatch","useDispatch","useState","maxValue","setMaxValue","setMinValue","disableIncrement","setDisableIncrement","setDisableSet","Count","countError","input","inputMax","TextField","type","label","value","onChange","e","max","Number","currentTarget","min","setAC","App","Boolean","window","location","hostname","match","reducer","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c45d00b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"Counter_count__1Wlg6\",\"countError\":\"Counter_countError__2wiFk\",\"inputMax\":\"Counter_inputMax__1uJ6j\",\"input\":\"Counter_input__19Qjp\",\"counter\":\"Counter_counter__QdRHl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"universalBtn\":\"UniversalButton_universalBtn__1EMEi\",\"set\":\"UniversalButton_set__1DVkD\",\"group\":\"UniversalButton_group__3kJJW\",\"twoButtons\":\"UniversalButton_twoButtons__2k7uu\"};","import React from \"react\";\nimport {Button} from \"@material-ui/core\";\nimport s from './UniversalButton.module.css'\n\ntype universalButtonPropsType = {\n    increment: () => void\n    minValue: number\n    maxValue: number\n    counter: number\n    disableButton: boolean\n    reset: (minValue: number) => void\n    set: () => void\n    disableSet: boolean\n}\n\nfunction UniversalButton(props: universalButtonPropsType) {\n\n    const resetButton = () => {\n        props.reset(props.minValue)\n    }\n\n\n    return (\n        <div className={s.group}>\n            <div className={s.set}>\n                <Button variant='contained' onClick={props.set} disabled={props.disableSet}>SET</Button>\n            </div>\n            <div className={s.twoButtons}>\n                <Button variant='contained' onClick={props.increment} disabled={props.disableButton}\n                        style={{marginRight: 10}}>Inc</Button>\n                <Button variant='contained' onClick={resetButton}>Reset</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default UniversalButton","const initialState = {\n    counterValue: 0,\n    resetValue: 0\n}\ntype ActionType = ReturnType<typeof incrementAC> | ReturnType<typeof resetAC> | ReturnType<typeof setAC>\ntype initialStateType = typeof initialState\nexport const counterReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\n    switch (action.type) {\n        case \"INCREMENT\": {\n            return {...state, counterValue: state.counterValue + 1}\n        }\n        case 'RESET': {\n            return {...state, counterValue: state.resetValue}\n        }\n        case 'SET': {\n            return {...state, counterValue: action.minValue}\n        }\n        default:\n            return state\n    }\n\n}\n\nexport const incrementAC = () => ({type: 'INCREMENT'} as const)\nexport const resetAC = () => ({type: 'RESET'} as const)\nexport const setAC = (minValue: number) => ({type: 'SET', minValue} as const)\n","import React, {ChangeEvent, useState} from \"react\";\nimport s from './Counter.module.css'\nimport UniversalButton from \"../universalButton/UniversalButton\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {rootStateType} from \"../../redux/store\";\nimport {incrementAC, resetAC, setAC} from \"../../redux/reducer\";\nimport {TextField} from \"@material-ui/core\";\n\nfunction Counter() {\n    let counter = useSelector<rootStateType, number>(state => state.count.counterValue)\n    const dispatch = useDispatch()\n\n    const [maxValue, setMaxValue] = useState(1)\n    const [minValue, setMinValue] = useState(0)\n    const [disableIncrement, setDisableIncrement] = useState(false)\n    const [disableSet, setDisableSet] = useState(false)\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let max = Number(e.currentTarget.value)\n        if (maxValue === counter) setDisableIncrement(true)\n        max - 1 < minValue ? setDisableIncrement(true) : setDisableIncrement(false)\n        setMaxValue(max)\n    }\n\n    const onChangeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let min = Number(e.currentTarget.value)\n        setMinValue(min)\n        min >= maxValue ? setDisableSet(true) : setDisableSet(false)\n        min >= maxValue ? setDisableIncrement(true) : setDisableIncrement(false)\n    }\n\n    const increment = () => {\n        if (maxValue - 1 === counter) setDisableIncrement(true)\n        if (counter <= maxValue) {\n            dispatch(incrementAC())\n            setDisableSet(false)\n        }\n    }\n    const reset = () => {\n        if (dispatch(resetAC())) {\n            setDisableIncrement(false)\n            setMaxValue(0)\n            setMinValue(0)\n            counter = 0\n        }\n    }\n    const set = () => {\n        dispatch(setAC(minValue))\n        setDisableIncrement(false)\n        setDisableSet(true)\n    }\n    const Count = () => {\n        return counter === maxValue ?\n            <span className={s.countError}>{counter}</span> :\n            <span className={s.count}>{counter}</span>\n    }\n\n    return (\n        <div className={s.counter}>\n            <div className={s.input}>\n                <div className={s.inputMax}>\n                    <TextField type={'number'}\n                               label=\"Maximum value\"\n                               value={maxValue}\n                               onChange={onChangeMaxValue}\n                               disabled={disableIncrement}\n                               variant=\"outlined\"/><br/>\n                </div>\n                <div>\n                    <TextField type={'number'}\n                               label=\"Minimum value\"\n                               value={minValue}\n                               onChange={onChangeMinValue}\n                               disabled={disableIncrement}\n                               variant=\"outlined\"/><br/>\n                </div>\n            </div>\n            <Count/>\n            <UniversalButton increment={increment}\n                             minValue={minValue}\n                             maxValue={maxValue}\n                             counter={counter}\n                             disableButton={disableIncrement}\n                             reset={reset}\n                             set={set}\n                             disableSet={disableSet}\n            />\n        </div>\n    )\n}\n\nexport default Counter","import React from \"react\";\nimport './App.css'\nimport Counter from \"./components/inputNumber/Counter\";\n\n\nfunction App() {\n\n    return (\n        <div className='App'>\n            <Counter/>\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {counterReducer} from \"./reducer\";\nimport {combineReducers, createStore} from \"redux\";\n\nconst reducer = combineReducers({\n    count: counterReducer\n})\nexport const store = createStore(reducer)\nexport type rootStateType = ReturnType<typeof reducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}